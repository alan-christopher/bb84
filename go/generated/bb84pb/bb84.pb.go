// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: proto/bb84.proto

package bb84pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DenseBitArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bits []byte `protobuf:"bytes,1,opt,name=bits,proto3" json:"bits,omitempty"`
	Len  int32  `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *DenseBitArray) Reset() {
	*x = DenseBitArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseBitArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseBitArray) ProtoMessage() {}

func (x *DenseBitArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseBitArray.ProtoReflect.Descriptor instead.
func (*DenseBitArray) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{0}
}

func (x *DenseBitArray) GetBits() []byte {
	if x != nil {
		return x.Bits
	}
	return nil
}

func (x *DenseBitArray) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type SparseBitArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices []int32 `protobuf:"varint,1,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Len     int32   `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *SparseBitArray) Reset() {
	*x = SparseBitArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseBitArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseBitArray) ProtoMessage() {}

func (x *SparseBitArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseBitArray.ProtoReflect.Descriptor instead.
func (*SparseBitArray) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{1}
}

func (x *SparseBitArray) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *SparseBitArray) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type BasisAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies which bases a sequence of photons was (en|de)coded in.
	Bases *DenseBitArray `protobuf:"bytes,1,opt,name=bases,proto3" json:"bases,omitempty"`
	// Specifies which pulses in a photon-sequence were lost.
	Dropped *DenseBitArray `protobuf:"bytes,2,opt,name=dropped,proto3" json:"dropped,omitempty"`
	// Specifies the values measured in the Z, or test, basis.
	TestBits *DenseBitArray `protobuf:"bytes,3,opt,name=test_bits,json=testBits,proto3" json:"test_bits,omitempty"`
	// Specifies which photons were sent on weak pulses.
	Lo *DenseBitArray `protobuf:"bytes,4,opt,name=lo,proto3" json:"lo,omitempty"`
	// Specifies which photons were sent on medium pulses.
	Med *DenseBitArray `protobuf:"bytes,5,opt,name=med,proto3" json:"med,omitempty"`
	// Specifies which photons were sent on strong pulses.
	Hi *DenseBitArray `protobuf:"bytes,6,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (x *BasisAnnouncement) Reset() {
	*x = BasisAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasisAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasisAnnouncement) ProtoMessage() {}

func (x *BasisAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasisAnnouncement.ProtoReflect.Descriptor instead.
func (*BasisAnnouncement) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{2}
}

func (x *BasisAnnouncement) GetBases() *DenseBitArray {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *BasisAnnouncement) GetDropped() *DenseBitArray {
	if x != nil {
		return x.Dropped
	}
	return nil
}

func (x *BasisAnnouncement) GetTestBits() *DenseBitArray {
	if x != nil {
		return x.TestBits
	}
	return nil
}

func (x *BasisAnnouncement) GetLo() *DenseBitArray {
	if x != nil {
		return x.Lo
	}
	return nil
}

func (x *BasisAnnouncement) GetMed() *DenseBitArray {
	if x != nil {
		return x.Med
	}
	return nil
}

func (x *BasisAnnouncement) GetHi() *DenseBitArray {
	if x != nil {
		return x.Hi
	}
	return nil
}

type HashAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The seed used when to choose the function from the hash family to create
	// the hash.
	Seed []byte `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	// The result of hashing our secret.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HashAnnouncement) Reset() {
	*x = HashAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashAnnouncement) ProtoMessage() {}

func (x *HashAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashAnnouncement.ProtoReflect.Descriptor instead.
func (*HashAnnouncement) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{3}
}

func (x *HashAnnouncement) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *HashAnnouncement) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ParityAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total parities of each of the code blocks which comprise the key
	// being negotiated.
	Parities *DenseBitArray `protobuf:"bytes,1,opt,name=parities,proto3" json:"parities,omitempty"`
}

func (x *ParityAnnouncement) Reset() {
	*x = ParityAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParityAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParityAnnouncement) ProtoMessage() {}

func (x *ParityAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParityAnnouncement.ProtoReflect.Descriptor instead.
func (*ParityAnnouncement) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{4}
}

func (x *ParityAnnouncement) GetParities() *DenseBitArray {
	if x != nil {
		return x.Parities
	}
	return nil
}

type SyndromeAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The syndromes of the code blocks which comprise the key being negotiated.
	// Note that some reconciliation protocols, e.g. Winnow, will only send
	// syndromes for some of its code blocks, and which ones will be present
	// must be inferred from a previous computational stage.
	Syndromes []*DenseBitArray `protobuf:"bytes,1,rep,name=syndromes,proto3" json:"syndromes,omitempty"`
}

func (x *SyndromeAnnouncement) Reset() {
	*x = SyndromeAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyndromeAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyndromeAnnouncement) ProtoMessage() {}

func (x *SyndromeAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyndromeAnnouncement.ProtoReflect.Descriptor instead.
func (*SyndromeAnnouncement) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{5}
}

func (x *SyndromeAnnouncement) GetSyndromes() []*DenseBitArray {
	if x != nil {
		return x.Syndromes
	}
	return nil
}

type ErrorCorrectionFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A randomly generated seed to use in key extraction (aka privacy amplification).
	ExtractSeed []byte `protobuf:"bytes,1,opt,name=extract_seed,json=extractSeed,proto3" json:"extract_seed,omitempty"`
	// A randomly generated seed for use to pick a hash for error correction verification.
	VerifySeed []byte `protobuf:"bytes,2,opt,name=verify_seed,json=verifySeed,proto3" json:"verify_seed,omitempty"`
	// The result of hashing our error-corrected, but unextracted, key.
	VerifyHash *DenseBitArray `protobuf:"bytes,3,opt,name=verify_hash,json=verifyHash,proto3" json:"verify_hash,omitempty"`
}

func (x *ErrorCorrectionFinished) Reset() {
	*x = ErrorCorrectionFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bb84_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCorrectionFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCorrectionFinished) ProtoMessage() {}

func (x *ErrorCorrectionFinished) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bb84_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCorrectionFinished.ProtoReflect.Descriptor instead.
func (*ErrorCorrectionFinished) Descriptor() ([]byte, []int) {
	return file_proto_bb84_proto_rawDescGZIP(), []int{6}
}

func (x *ErrorCorrectionFinished) GetExtractSeed() []byte {
	if x != nil {
		return x.ExtractSeed
	}
	return nil
}

func (x *ErrorCorrectionFinished) GetVerifySeed() []byte {
	if x != nil {
		return x.VerifySeed
	}
	return nil
}

func (x *ErrorCorrectionFinished) GetVerifyHash() *DenseBitArray {
	if x != nil {
		return x.VerifyHash
	}
	return nil
}

var File_proto_bb84_proto protoreflect.FileDescriptor

var file_proto_bb84_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x62, 0x62, 0x38, 0x34, 0x22, 0x35, 0x0a, 0x0d, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22,
	0x3c, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x90, 0x02,
	0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42,
	0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x02, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62,
	0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x02, 0x6c, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x69,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x68,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44,
	0x65, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x02, 0x68, 0x69,
	0x22, 0x3a, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x45, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x08, 0x70, 0x61, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x73,
	0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x69, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x17, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x62, 0x38, 0x34, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65,
	0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x12, 0x5a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x62, 0x62, 0x38, 0x34, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bb84_proto_rawDescOnce sync.Once
	file_proto_bb84_proto_rawDescData = file_proto_bb84_proto_rawDesc
)

func file_proto_bb84_proto_rawDescGZIP() []byte {
	file_proto_bb84_proto_rawDescOnce.Do(func() {
		file_proto_bb84_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bb84_proto_rawDescData)
	})
	return file_proto_bb84_proto_rawDescData
}

var file_proto_bb84_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_bb84_proto_goTypes = []interface{}{
	(*DenseBitArray)(nil),           // 0: bb84.DenseBitArray
	(*SparseBitArray)(nil),          // 1: bb84.SparseBitArray
	(*BasisAnnouncement)(nil),       // 2: bb84.BasisAnnouncement
	(*HashAnnouncement)(nil),        // 3: bb84.HashAnnouncement
	(*ParityAnnouncement)(nil),      // 4: bb84.ParityAnnouncement
	(*SyndromeAnnouncement)(nil),    // 5: bb84.SyndromeAnnouncement
	(*ErrorCorrectionFinished)(nil), // 6: bb84.ErrorCorrectionFinished
}
var file_proto_bb84_proto_depIdxs = []int32{
	0, // 0: bb84.BasisAnnouncement.bases:type_name -> bb84.DenseBitArray
	0, // 1: bb84.BasisAnnouncement.dropped:type_name -> bb84.DenseBitArray
	0, // 2: bb84.BasisAnnouncement.test_bits:type_name -> bb84.DenseBitArray
	0, // 3: bb84.BasisAnnouncement.lo:type_name -> bb84.DenseBitArray
	0, // 4: bb84.BasisAnnouncement.med:type_name -> bb84.DenseBitArray
	0, // 5: bb84.BasisAnnouncement.hi:type_name -> bb84.DenseBitArray
	0, // 6: bb84.ParityAnnouncement.parities:type_name -> bb84.DenseBitArray
	0, // 7: bb84.SyndromeAnnouncement.syndromes:type_name -> bb84.DenseBitArray
	0, // 8: bb84.ErrorCorrectionFinished.verify_hash:type_name -> bb84.DenseBitArray
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_bb84_proto_init() }
func file_proto_bb84_proto_init() {
	if File_proto_bb84_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bb84_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseBitArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseBitArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasisAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParityAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyndromeAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bb84_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCorrectionFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bb84_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bb84_proto_goTypes,
		DependencyIndexes: file_proto_bb84_proto_depIdxs,
		MessageInfos:      file_proto_bb84_proto_msgTypes,
	}.Build()
	File_proto_bb84_proto = out.File
	file_proto_bb84_proto_rawDesc = nil
	file_proto_bb84_proto_goTypes = nil
	file_proto_bb84_proto_depIdxs = nil
}
